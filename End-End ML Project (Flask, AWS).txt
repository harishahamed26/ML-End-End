Tutorial 1:

1 - Set up github
	a) new environment
		1. conda create -p venv python=3.8 -y
		2. conda activate venv/
	
	Making the changes sync to github
	echo "# ML-End-End" >> README.md
	git init
	git add README.md
	git commit -m "first commit"
	git branch -M main
	git remote add origin https://github.com/harishahamed26/ML-End-End.git
	git push -u origin main

	add git ignore in the repositiory. - > add file -> filename .gitignore and python as template
	To update in vs code:	git pull  

	b) setup.py
		Used to create a package and even deploy in pypi (just like pip install seaborn)
		create a folder src and create __init__.py (to find the src as package)
	c) requiremenet.txt
		write all the packages
		-e . ( [-e . ]to automate to run the setup.py whenever the new requirements are added

Once everything done:

	- pip install -r requirements.txt
and so  ->  ml_project.egg-info or mlproject.egg-info will be created included with dependency_links.txt, PKG-INFO, requires.txt, SOURCES.txt and top_level.txt

final:

git add . # to add all the files in git
git status # to check the status 
git commit -m "setup and requirements commit" # to commit the changes
git push -u origin main # to push into github


------------------------------------------------------------------------------------------------

Tutorial 2:

Project Structure
Logging
Exceptional Handling

1. create folder name in src : components and create __init__.py file
	Components: [components are noting but models]
		- __init__.py
		- data_ingestion.py [ ingesting the data ]
		- data_transformation.py [ transforming the data ]
		- model_trainer.py [ training the models ]
2. create folder name in src : pipeline and create __init__.py file
	pipeline
		- __init__.py
		- train_pipeline.py [ pipeline to train the data ]
		- predict_pipeline.py [ pipeline to predict the data ]
	
3. create file name in src : logger.py [ for record logging ]
4. create file name in src : exception.py [ for exception handling ]
5. create file name in src : util.py [ common functions ]


exception.py:
	We can actually use the exceptional documentations

logger.py
	We can actually use the logger documentations


final:

git add . # to add all the files in git
git status # to check the status 
git commit -m "setup and requirements commit" # to commit the changes
git push -u origin main # to push into github


------------------------------------------------------------------------------------------------

Tutorial 3:

Problem Statement: 

This project understands how the student's performance (test scores) is affected by other variables such as Gender, Ethnicity, Parental level of education, Lunch and Test preparation course.

Data Source: https://www.kaggle.com/datasets/spscientist/students-performance-in-exams?resource=download


1. create folder name in main project : notebook [ To perform the EDA and Evaluation]
	- EDA.ipynb [ To perfom the Exploratory Data Analysis ]
	- model_training.ipynb [ To train and assess the model ]
2. create folder name in main project : data [ To store the data.csv/ data]

final:

git add . # to add all the files in git
git status # to check the status 
git commit -m "setup and requirements commit" # to commit the changes
git push -u origin main # to push into github

Notes:

xgboost will not work for m1 mac so we have to install -> brew install libomp
else we will get error message as:

raise XGBoostError(
xgboost.core.XGBoostError: 
XGBoost Library (libxgboost.dylib) could not be loaded.
Likely causes:
  * OpenMP runtime is not installed
    - vcomp140.dll or libgomp-1.dll for Windows
    - libomp.dylib for Mac OSX
    - libgomp.so for Linux and other UNIX-like OSes
    Mac OSX users: Run `brew install libomp` to install OpenMP runtime.

  * You are running 32-bit Python on a 64-bit OS

------------------------------------------------------------------------------------------------

Tutorial 4:






------------------------------------------------------------------------------------------------

Tutorial 5:






------------------------------------------------------------------------------------------------

Tutorial 6:






------------------------------------------------------------------------------------------------

Tutorial 7:






------------------------------------------------------------------------------------------------

Tutorial 8:






------------------------------------------------------------------------------------------------
